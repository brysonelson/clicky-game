{"version":3,"sources":["components/Navbar/index.js","components/Wrapper/index.js","components/Title/index.js","components/CharacterCard/index.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","firstGuess","correctGuess","count","highScore","Wrapper","children","Title","CharacterCard","onClick","countCharacter","id","alt","name","src","image","App","state","characters","countedCharacters","_this","indexOf","findCharacters","filter","character","i","length","push","j","Math","floor","random","_ref","setState","_this2","this","components_Wrapper","components_Navbar","components_Title","map","components_CharacterCard","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0a2c2b28.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// By extending the React.Component class, Counter inherits functionality from it\nfunction Navbar(props) {\n\n    // The render method returns the JSX that should be rendered\n    return (\n        //use bootstrap to create a navbar\n        <div className=\"container\">\n            <nav className=\"navbar navbar fixed-top navbar-light bg-light\">\n                <span className=\"navbar-brand mb-0 h1\">Navbar</span>\n                \n                <div className=\"row nav-row\">\n                    <div className=\"col-lg-6\">\n                    {/* use a ternary operator to decide what to render based on if the user has\n                    made a guess yet */}\n                    {!props.firstGuess ? (\n                        <p>Choose a Character Below: </p>\n                    ):(\n                        // if the user has already made at least one guess, display one of the following\n                        // based on if the users guess was correct or not\n                        <div>\n                            {props.correctGuess ? (\n                                <p>You Guessed Correctly!</p>\n                            ): (\n                                <p>Wrong Guess!</p>\n                            )}\n                        </div>\n                        )}\n                    </div>\n                    <div className=\"col-lg-6\">\n                        {/* display the users current score and their highscore */}\n                        <p className=\"\">Correct Guesses: {props.count} | High Score: {props.highScore}</p>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    );\n};\n\nexport default Navbar;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  // create a wrapper to enclose our app\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        {/* display whatever text we want for the title */}\n        <h1 className=\"title\">{props.children}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\n//this is the character card element\nfunction CharacterCard(props) {\n  return (\n    //call the countCharacter function in app.js\n    <div onClick={() => props.countCharacter(props.id)} className=\"card\">\n      <div className=\"img-container\">\n        {/* display the image based on the url for said character */}\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import Navbar from \"./components/Navbar\";\nimport React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport characters from \"./characters.json\";\nimport CharacterCard from \"./components/CharacterCard\";\n\nclass App extends Component {\n  // Setting initial state\n  state = {\n    characters,\n    countedCharacters: [],\n    count: 0,\n    highScore: 0,\n    correctGuess: null,\n    firstGuess: false\n  };\n\n\n  countCharacter = id => {\n\n    //look to see if the selected character's id already exists in the countedCharacters array\n    // if the character does not yet exist, keep going\n    if (this.state.countedCharacters.indexOf(id) === -1) {\n\n      //store the id of the selected character\n      const findCharacters = this.state.characters.filter((character) => character.id === id);\n\n      //store the current counted character in a variable\n      const countedCharacters = this.state.countedCharacters;\n\n      //loop through the entire array of found characters, will only be one in this game\n      for (let i = 0; i < findCharacters.length; i++) {\n\n        //push the id of the newly selected character into the countedCharacters array\n        countedCharacters.push(findCharacters[i].id);\n      }\n\n      // randomize the list of characters for the next pick\n      for (let i = this.state.characters.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [this.state.characters[i], this.state.characters[j]] = [this.state.characters[j], this.state.characters[i]];\n      }\n\n      //store the current high score\n      let highScore = this.state.highScore\n\n      //if the current high score is less than the current correct click count\n      //set the highScore to be the current click count\n      if (highScore <= this.state.count) {\n        highScore = this.state.count + 1\n      }\n     \n      //update the state of the app to reflect the users choices\n      this.setState({\n        countedCharacters,\n        count: this.state.count + 1,\n        characters: this.state.characters,\n        highScore: highScore,\n        correctGuess: true,\n        firstGuess: true\n      });\n    } \n    //if the users guess has already been guessed\n    //reset the state to the beginning\n    else {\n      this.setState({ \n        count: 0,\n        countedCharacters: [],\n        correctGuess: false ,\n        firstGuess: false\n      });\n    }\n  };\n\n  // render the components to the page\n  render() {\n    return (\n      //return the wrapper element\n      <Wrapper className=\"container\">\n        {/* return the Navbar element while passing the current click count, highscore, whether the users guess was corrent,\n        and wether they have already guess the first time or not */}\n        <Navbar count={this.state.count} highScore={this.state.highScore} correctGuess={this.state.correctGuess} firstGuess={this.state.firstGuess}/>\n        {/* render the title section */}\n        <Title>Superhero Memory Game</Title>\n        {/* map over the characters array and create a character card passing in the relevent character info */}\n        {this.state.characters.map(character => (\n          <CharacterCard\n            countCharacter ={this.countCharacter}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// starting place for rendering our app\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}